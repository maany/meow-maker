import { injectable } from "inversify";
import { BaseSingleEndpointPostProcessingPipelineStreamingUseCase } from "{{ imports.cats }}/usecase";
import { AuthenticatedRequestModel } from "{{ imports.cats }}/usecase-models";

import { {{ feature.CamelCase }}Error, {{ feature.CamelCase }}Request, {{ feature.CamelCase }}Response } from "{{ imports.usecase_models }}/{{ feature.kebab_case }}-usecase-models";
import { {{ viewModel.name }} } from "{{ viewModel.importPath }}";

import type {{ gateway.output_port.name }} from "{{ gateway.output_port.importPath }}";
import { {{ gateway.dto.name }} } from "{{ gateway.dto.importPath }}";
import { {{ stream.dto.name }} } from "{{ stream.dto.importPath }}";

import { {{feature.CamelCase}}InputPort, type {{ feature.CamelCase }}OutputPort } from "{{ imports.primary_ports }}/{{feature.kebab_case}}-ports";

{% for pipelineElement in pipeline %}
import {{ pipelineElement.name }} from "./pipeline-element-{{ pipelineElement.kebab_case }}";
import type {{ pipelineElement.gateway.output_port.name }} from "{{ pipelineElement.gateway.output_port.importPath }}";
{% endfor %}

@injectable()
export default class {{ feature.CamelCase }}UseCase extends BaseSingleEndpointPostProcessingPipelineStreamingUseCase<{{ feature.CamelCase }}Request, {{ feature.CamelCase }}Response, {{ feature.CamelCase }}Error, {{ gateway.dto.name }}, {{ stream.dto.name }}, {{ viewModel.name }}> implements {{ feature.CamelCase }}InputPort {

  constructor(
    protected readonly presenter: {{ feature.CamelCase }}OutputPort,
    private readonly gateway: {{ gateway.output_port.name }},
    {% for pipelineElement in pipeline %}
    readonly {{ pipelineElement.gateway.varCamelCase }}: {{ pipelineElement.gateway.output_port.name }},
    {% endfor %}
  ) {
    // TODO check if right gateways are passed to the pipeline elements
    const pipelineElements = [
      {% for pipelineElement in pipeline %}
      new {{ pipelineElement.name }}({{ pipelineElement.gateway.varCamelCase }}),
      {% endfor %}
    ];
    super(presenter, pipelineElements);
    this.gateway = gateway;
  }

  validateRequestModel(requestModel: AuthenticatedRequestModel<{{ feature.CamelCase }}Request>): {{ feature.CamelCase }}Error | undefined {
    return undefined
  }

  async makeGatewayRequest(requestModel: AuthenticatedRequestModel<{{ feature.CamelCase }}Request>): Promise<{{ gateway.dto.name }}> {
    // TODO: extract parameters from requestModel
    const { rucioAuthToken } = requestModel;
    // TODO: add parameters to gateway request
    const dto: {{gateway.dto.name}} = await this.gateway.{{ gateway.endpoint_fn }}(rucioAuthToken);
    return dto;
  }

  handleGatewayError(error: {{ gateway.dto.name }}): {{ feature.CamelCase }}Error {
    return {
        status: 'error',
        error: `Gateway retuned with ${error.errorCode}: ${error.errorMessage}`,
        message: error.errorMessage? error.errorMessage : 'Gateway Error',
        name: `Gateway Error`,
        code: error.errorCode,
    } as {{feature.CamelCase}}Error
  }

  processStreamedData(dto: {{ stream.dto.name }}): { data: {{ feature.CamelCase }}Response | {{ feature.CamelCase }}Error; status: "success" | "error"; } {
    // TODO: process streamed data
    if(dto.status === 'error') {
        const errorModel: {{ feature.CamelCase }}Error = {
                status: 'error',
                code: dto.errorCode || 500,
                message: dto.errorMessage || 'Could not fetch or process the fetched data',
                name: dto.errorName || 'Gateway Error',
        }
        return {
            status: 'error',
            data: errorModel,
        }
    }
    // TODO: convert to response model
    const responseModel: {{ feature.CamelCase }}Response = {
        ...dto,
        status: 'success',
    }
    return {
        status: 'success',
        data: responseModel,
    }
  }

  validateFinalResponseModel(responseModel: {{ feature.CamelCase }}Response ): { isValid: boolean; errorModel?: {{ feature.CamelCase  }}Error | undefined; } {
        return {
            isValid: true,
        }
  }
}
