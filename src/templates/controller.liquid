import { injectable, inject } from "inversify";
import { NextApiResponse } from "next";

import { AuthenticatedRequestModel } from "{{ imports.cats }}/usecase-models";
import { BaseController, TAuthenticatedControllerParameters } from "{{ imports.cats }}/controller";
import { {{ feature.CamelCase }}Request } from "{{ imports.usecase_models  }}/{{ feature.kebab_case  }}-usecase-models";
import { {{ feature.CamelCase }}InputPort } from "{{ imports.primary_ports }}/{{ feature.kebab_case }}-ports";
import USECASE_FACTORY from "{{ imports.ioc }}/ioc-symbols-usecase-factory";

export type {{ feature.CamelCase}}ControllerParameters = TAuthenticatedControllerParameters & {
    // TODO Add parameters here
};

@injectable()
class {{ feature.CamelCase}}Controller extends BaseController<{{ feature.CamelCase }}ControllerParameters, AuthenticatedRequestModel<{{ feature.CamelCase }}Request>> {
    constructor(
        @inject(USECASE_FACTORY.{{ feature.snake_case | upcase }}) {{ feature.varCamelCase }}UseCaseFactory: (response: NextApiResponse) => {{ feature.CamelCase }}InputPort,
    ) {
        super({{ feature.varCamelCase }}UseCaseFactory);
    }
    prepareRequestModel(parameters: {{ feature.CamelCase }}ControllerParameters): AuthenticatedRequestModel<{{ feature.CamelCase }}Request> {
        return {
            rucioAuthToken: parameters.rucioAuthToken
        }
    }
}

export default {{ feature.CamelCase }}Controller;