import {
    {{ feature.CamelCase }}Error,
    {{ feature.CamelCase }}Response,
} from '{{ imports.usecase_models }}/{{ feature.kebab_case }}-usecase-models'
import { NextApiResponse } from 'next'
import { {{ viewModel.name }}, generateEmpty{{ viewModel.name }} } from '{{ viewModel.importPath }}'
import { BaseStreamingPresenter } from '{{ imports.cats }}/presenter'
import { {{ feature.CamelCase }}OutputPort } from '{{ imports.primary_ports }}/{{ feature.kebab_case }}-ports'

export default class {{ feature.CamelCase }}Presenter extends BaseStreamingPresenter<{{ feature.CamelCase }}Response, {{ feature.CamelCase }}Error, {{ viewModel.name }}> implements {{ feature.CamelCase }}OutputPort {
    response: NextApiResponse<any>

    constructor(response: NextApiResponse) {
        super(response)
        this.response = response
    }

    streamResponseModelToViewModel(responseModel: {{ feature.CamelCase }}Response): {{ viewModel.name }} {
        const viewModel: {{ viewModel.name }} = {
            ...responseModel,
        }
        return viewModel
    }

    streamErrorModelToViewModel(error: {{ feature.CamelCase }}Error): {{ viewModel.name }} {
        const errorViewModel: {{ viewModel.name }} = generateEmpty{{ viewModel.name }}();
        // TODO: add error handling
        errorViewModel.status = 'error';
        errorViewModel.message = `${error.name}: ${error.message}`;
        return errorViewModel;
    }

    /**
     * Converts an error model to an error view model.
     * @param errorModel The error model to convert.
     * @returns The error view model that represents the error model.
     */
     convertErrorModelToViewModel(errorModel: {{ feature.CamelCase }}Error): { viewModel: {{ viewModel.name }}; status: number; } {
        const viewModel: {{ viewModel.name }} = generateEmpty{{ viewModel.name }}();
        
        // custom usecase errors, for example
        // if(errorModel.name === 'Invalid Account') {
        //     viewModel.message = errorModel.message;
        //     return {
        //         status: 400,
        //         viewModel: viewModel
        //     }
        // }

        // gateway errors
        const message = errorModel.message ? errorModel.message.toString() : errorModel.name;
        const name = errorModel.name ? errorModel.name : '';
        viewModel.message = message;
        const errorCode = errorModel.code ? errorModel.code : 500;
        return {
            status: errorCode,
            viewModel: viewModel
        }
    }
}
