import { BaseStreamingPostProcessingPipelineElement } from "{{imports.cats}}postprocessing-current_pipeline_element-elements";
import { AuthenticatedRequestModel } from "{{imports.cats}}/usecase-models";

import { {{ current_pipeline_element.gateway.dto.name }}, getEmpty{{ current_pipeline_element.gateway.dto.name }} } from "{{ current_pipeline_element.gateway.dto.importPath }}";
import {{ current_pipeline_element.gateway.output_port.name }} from "{{ current_pipeline_element.gateway.output_port.importPath }}";
import { {{feature.CamelCase}}Error, {{feature.CamelCase}}Request, {{feature.CamelCase}}Response } from "{{ imports.usecase_models }}/{{feature.kebab_case}}-usecase-models";


export default class {{current_pipeline_element.name}} extends BaseStreamingPostProcessingPipelineElement<{{feature.CamelCase}}Request, {{feature.CamelCase}}Response, {{feature.CamelCase}}Error, {{current_pipeline_element.gateway.dto.name}}>{
    constructor(private gateway: {{current_pipeline_element.gateway.output_port}}) {
        super();
    }
    async makeGatewayRequest(requestModel: AuthenticatedRequestModel<{{feature.CamelCase}}Request>, responseModel: {{feature.CamelCase}}Response): Promise<{{current_pipeline_element.gateway.dto.name}}> {
        try {
            // TODO: add parameters to gateway endpoint function
            const dto: {{current_pipeline_element.gateway.dto.name}} = await this.gateway.{{current_pipeline_element.gateway.endpoint_fn}}(requestModel.rucioAuthToken);
            return dto;
        } catch (error: any) {
            const errorDTO: {{current_pipeline_element.gateway.dto.name}} = getEmpty{{current_pipeline_element.gateway.dto.name}}()
            // TODO: update error information
            return errorDTO;
        }
    }

    handleGatewayError(dto: {{current_pipeline_element.gateway.dto.name}}): {{feature.CamelCase}}Error {
        
        const errorModel: {{feature.CamelCase}}Error = {
            status: 'error',
            name: dto.name,
            error: error,
            code: dto.errorCode? dto.errorCode : 400,
            message: dto.errorName + ': ' + dto.errorMessage + ',
        }
        return errorModel;
    }
   
    transformResponseModel(responseModel: ListDIDsResponse, dto: {{current_pipeline_element.gateway.dto.name}}): ListDIDsResponse {
        // TODO: update responseModel with DTO
        return responseModel;
    }
}