import { BasePresenter } from "{{ imports.cats }}/presenter";
import { {{ feature.CamelCase }}Error, {{ feature.CamelCase }}Response } from "{{ imports.usecase_models }}/{{ feature.kebab_case }}-usecase-models";
import { getEmpty{{ viewModel.name }}, {{ viewModel.name }} } from "{{ viewModel.importPath }}";

export default class {{ feature.CamelCase }}Presenter extends BasePresenter<{{ feature.CamelCase }}Response, {{ feature.CamelCase }}Error, SubscriptionViewModel> {
    convertResponseModelToViewModel(responseModel: {{ feature.CamelCase }}Response): { viewModel: {{ viewModel.name }}; status: number; } {
        const viewModel: {{ viewModel.name  }} = {
            ...responseModel,
        }
        return {
            status: 200,
            viewModel: viewModel
        }
    }
    convertErrorModelToViewModel(errorModel: {{ feature.CamelCase }}Error): { viewModel: {{ viewModel.name }}; status: number; } {
        const viewModel: {{ viewModel.name }} = getEmpty{{ viewModel.name }}();
        let status = 400;
        // switch (errorModel.error) {
            TODO: add error handling
        // }
        return {
            status: status,
            viewModel: viewModel
        }
    }

}