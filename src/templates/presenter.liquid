import { BasePresenter } from "{{ imports.cats }}/presenter";
import { {{ feature.CamelCase }}Error, {{ feature.CamelCase }}Response } from "{{ imports.usecase_models }}/{{ feature.kebab_case }}-usecase-models";
import { generateEmpty{{ viewModel.name }}, {{ viewModel.name }} } from "{{ viewModel.importPath }}";

export default class {{ feature.CamelCase }}Presenter extends BasePresenter<{{ feature.CamelCase }}Response, {{ feature.CamelCase }}Error, {{ viewModel.name }}> {
    convertResponseModelToViewModel(responseModel: {{ feature.CamelCase }}Response): { viewModel: {{ viewModel.name }}; status: number; } {
        const viewModel: {{ viewModel.name  }} = {
            ...responseModel,
        }
        return {
            status: 200,
            viewModel: viewModel
        }
    }
    
    convertErrorModelToViewModel(errorModel: {{ feature.CamelCase }}Error): { viewModel: {{ viewModel.name }}; status: number; } {
        const viewModel: {{ viewModel.name }} = generateEmpty{{ viewModel.name }}();
        
        // custom usecase errors, for example
        // if(errorModel.name === 'Invalid Account') {
        //     viewModel.message = errorModel.message;
        //     return {
        //         status: 400,
        //         viewModel: viewModel
        //     }
        // }

        // gateway errors
        const message = errorModel.message ? errorModel.message.toString() : errorModel.name;
        const name = errorModel.name ? errorModel.name : '';
        viewModel.message = message;
        const errorCode = errorModel.code ? errorModel.code : 500;
        return {
            status: errorCode,
            viewModel: viewModel
        }
    }

}